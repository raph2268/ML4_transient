# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import sys,os
from importlib import reload
from matplotlib import cm
from PIL import Image
import io
import base64

from mpl_toolkits.axes_grid1 import make_axes_locatable

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' #Permet d'enlever les Warning tensorflow

np.random.seed(1) # NumPy
import random
random.seed(2) # Python
#tf.random.set_seed(3) # Tensorflow 

sys.path.append('..')

datadir  = '/sps/lsst/users/fouchez/mariam/Testing_area/Classification/cutouts/new_data/'
rundir = '/sps/lsst/users/rbonnetguerrini/ML4_transientV4'
pddir = '/sps/lsst/users/bracine/ForMariam/20210320_Fake_and_real_cutouts/cutouts_new/'


All_visits_gen3 = [322, 346, 358, 1178, 1184, 1204, 1206, 1214, 1220, 1242, 1248, 11690,
    11694, 11696, 11698, 11704, 11710, 11724, 11738, 11740, 17900, 17904,
    17906, 17926, 17948, 17950, 19680, 19684, 19694, 19696, 22632, 22662,
    23694, 23704, 23706, 23718, 29336, 29350, 30482, 30490]
All_visits_UDEEP = [53722,  53724,
        53726,  53728,  53730,  53732,  53734,  53736,  53738,  53740,
        53742,  53744,  53746,  53748,  53750,  53752,  53754,  54086,
        54088,  54090,  54092,  54094,  54096,  54098,  54100,  54120,
        54122,  54124,  54126,  54128,  56810,  56812,  56814,  56816,
        56820,  56822,  56824,  56826,  56828,  56830,  56832,  57910,
        57912,  57914,  57916,  57918,  57920,  57922,  57924,  59904,
        59906,  59908,  59910,  59912,  59914,  61310,  61312,  61314,
        61316,  61318,  61320,  61322,  61324,  61326,  61328,  61330,
        62982,  62984,  62986,  62988,  62990,  62992,  62994,  62996,
        62998,  68302,  68304,  68306,  68308,  68320,  68322,  68324,
        68326,  68328,  68330,  68332,  89758,  89760,  89762,  89764,
        89766,  89768,  89770,  89772,  89776,  89778,  89780,  89782,
        89784,  89786,  89788,  89792,  89794,  89796,  89798,  89800,
        89802,  89804,  89806,  89808,  89810,  89812,  89814,  89816,
        89818,  89820,  89822,  90748,  90750,  90752,  90754,  90756,
        90758,  90760,  90764,  90766,  90768,  90770,  90772,  90774,
        90776,  90778,  90780,  90782,  90784,  91552,  91554,  91556,
        91558,  91560,  91562,  91564,  91892,  91894,  91896,  91898,
        91900,  91902,  91904,  91906,  91910,  91912,  91914,  91916,
        91918,  91920,  91922,  91924,  91926,  91928,  92498,  92500,
        92502,  92540,  92542,  92544,  92568,  92570,  92572,  92582,
        92584,  92594,  92596,  92606,  92608,  93374,  93384,  93394,
        93404,  93408,  93410,  93420,  93422,  93432,  93434,  93444,
        93446,  93448,  93450,  93452,  93748,  93758,  93768,  93772,
        93774,  93776,  93786,  93788,  93790,  93800,  93802,  93804,
        93814,  93820,  93834,  95064,  95066,  95068,  95070,  95072,
        95074,  95076,  95078,  95080,  95082,  95084,  95088,  95090,
        95092,  95094,  95096,  95098,  95100,  95102,  95148,  95158,
        95168,  95178,  95788,  95790,  95792,  95802,  95804,  95806,
        95816,  95818,  95820,  95830,  95832,  96166,  96168,  96170,
        96194,  96196,  96198,  96208,  96210,  96212,  96222,  96224,
        96850,  96888,  96898,  96936,  96968,  96970,  96994,  96996,
        97006,  97008,  97024,  97026,  97442,  97452,  97462,  97472,
        97474,  97484,  97494,  97504,  97506,  97516,  97526,  97536,
        97540,  97550,  97560,  97570,  97572,  97582,  97594,  97596,
        97598,  97608,  97610,  97612,  97622,  97624,  97626,  97636,
        97638, 100750, 100752, 100762, 100764, 100774, 100776, 100786,
       100788, 100800, 100802, 100804, 100814, 100816, 100818, 100820,
       100822, 100824, 100826, 100836, 100838, 100840, 100850, 100852,
       101418, 101428, 101438, 101448, 101450, 101460, 101470, 101480,
       101490, 101500, 101826, 101836, 101846, 101856, 102098, 102100,
       102102, 102112, 102114, 102116, 102126, 102128, 102130, 102140,
       102142, 102146, 102148, 102150, 102160, 102162, 102164, 102174,
       102176, 102178, 102188, 102190, 102192, 102194, 102196, 102206,
       102208, 102210, 102220, 102222, 102224, 102234, 102236, 102410,
       102412, 102414, 102424, 102426, 102428, 102438, 102440, 102442,
       102452, 102454, 103044, 103054, 103064, 103074, 103076, 103086,
       103096, 103106, 103108, 103118, 103128, 103134, 103144, 103154,
       103164, 103166, 103660, 103662, 103672, 103674, 103684, 103686,
       103696, 103698, 103700, 103702, 103712, 103714, 103724, 103726,
       103736, 103738, 103740, 103742, 103752, 103754, 103764, 103766,
       103776, 103778, 103780, 103782, 103792, 103794, 103804, 103806,
       103816, 104166, 104168, 104170, 104180, 104182, 104184, 104484,
       104486, 104488, 104498, 104500, 104502, 104512, 104514, 104516,
       104526, 104528, 104582, 104584, 104594, 104596, 104606, 104608,
       104618, 104620, 104856, 104866, 105108, 105118, 105128, 105138,
       105502, 105504, 105506, 105530, 105532, 105534, 105558, 105560,
       105562, 105586, 105588, 105734, 105736, 105738, 105748, 105750,
       105752, 105762, 105764, 105766, 105776, 105778, 106058, 106068,
       106078, 106130, 106142, 106144, 106146, 106156, 106158, 106160,
       106170, 106172, 106174, 106184, 106186, 106330, 106332, 106342,
       106344, 106354, 106356, 106512, 106522, 106532, 106542, 106552,
       106708, 106710, 106712, 106714, 106716, 107872, 107882, 107892,
       107902, 107968, 107970, 107972, 107974, 107976, 107978, 107980,
       107982, 107984, 107986, 107988, 108196, 108198, 108200, 108202,
       108204, 108206, 108208, 108210, 108212, 108214, 108216, 108218,
       108222, 108224, 108226, 108228, 108230, 108232, 108234, 108236,
       108238, 108240, 108242, 108244, 108246, 108248, 108250, 108676,
       108678, 108680, 108682, 108684, 108686, 108688, 108690, 108692,
       108694, 108696, 110386, 110388, 110390, 110392, 110394, 110396,
       110398, 110400, 110402, 110404, 110406, 110408, 110410, 110412,
       111346, 111348, 111350, 111352, 111354, 111356, 111358, 111360,
       111416, 111418, 111420, 111422, 111424, 111426, 111428, 111430,
       111432, 111434, 111436, 111438, 111440, 113138, 113140, 113142,
       113144, 113146, 113148, 113150, 113152, 113156, 113158, 113160,
       113162, 113164, 113166, 113168, 113170, 113174, 113176, 113178,
       113180, 113476, 113478, 113480, 113482, 113484, 113486, 114500,
       114502, 114504, 114506, 114508, 114510, 114512, 114514, 114516,
       114518, 114520, 116408, 116410, 116412]

def decode_and_preprocess(base64_string):
    # Remove the prefix if it's in the base64 string
    if base64_string.startswith('data:image/png;base64,'):
        base64_string = base64_string.replace('data:image/png;base64,', '')
    
    # Decode the base64 string
    image_data = base64.b64decode(base64_string)
    
    # Convert the byte data back to an image
    buffer = io.BytesIO(image_data)
    image = Image.open(buffer).convert('L')  # Convert image to grayscale ('L' mode)
    
    # Convert image back to a numpy array
    image_np = np.array(image)
        
    # Ensure the shape is (30, 30, 1)
    image_np = np.expand_dims(image_np, axis=-1)
    
    return image_np

def embeddable_image(data):
    data = np.squeeze(data)
    image = Image.fromarray(np.uint8(cm.viridis(data)*255))

    buffer = io.BytesIO()
    image.save(buffer, format='png')
    for_encoding = buffer.getvalue()
    
    return 'data:image/png;base64,' + base64.b64encode(for_encoding).decode()


